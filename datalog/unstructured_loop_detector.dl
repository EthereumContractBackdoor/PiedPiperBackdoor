// CURRENTLY UNUSED! (But Neville says "it's nice code". :-))

.comp LoopDetection {
  .decl Edge(x:Block, y: Block)

  .decl CanReachBlock(s:Block, t:Block)

  CanReachBlock(x, y), CanReachBlock(y, y), CanReachBlock(x, x) :- Edge(x, y).
  CanReachBlock(x, z) :- CanReachBlock(x, y), Edge(y, z).

  .decl InSameSCC(x:Block, y:Block)
  InSameSCC(y, y), InSameSCC(x, x) :- Edge(x, y).
  InSameSCC(x, y) :- CanReachBlock(x,y), CanReachBlock(y,x).

  .decl BlockInLoop(x:Block)

  BlockInLoop(x) :- InSameSCC(x, y), x != y.
  BlockInLoop(x) :- Edge(x, x).

      
  .decl CrossSCCEdge(x:Block, y: Block)
  CrossSCCEdge(x, y) :- Edge(x, y), !InSameSCC(x, y).

  .decl LoopEntryEdge(x:Block, y: Block)
  LoopEntryEdge(x, y) :- CrossSCCEdge(x, y), BlockInLoop(y).

  .decl LoopExitEdge(x:Block, y: Block)
  LoopExitEdge(x, y) :- CrossSCCEdge(x, y), BlockInLoop(x).

  .decl EdgeInSameSCC(x:Block, y: Block)
  EdgeInSameSCC(x, y) :- Edge(x, y), InSameSCC(x, y).

  .decl ReentryEdge(x:Block, y: Block)
  ReentryEdge(x, z) :- LoopExitEdge(x, y), EdgeInSameSCC(x, z), y!=z.

  .decl NextEdge(x:Block, y: Block)
  NextEdge(x, y) :- EdgeInSameSCC(x, y), BlockInLoop(x), !ReentryEdge(x, y), x!=y.
}

.init loop0 = LoopDetection
loop0.Edge(x, y) :- edge(xb, yb), block(xb, x), block(yb, y).
.init loop1 = LoopDetection
loop1.Edge(x, y) :- loop0.NextEdge(x, y).
.init loop2 = LoopDetection
loop2.Edge(x, y) :- loop1.NextEdge(x, y).
.init loop3 = LoopDetection
loop3.Edge(x, y) :- loop2.NextEdge(x, y).
.init loop4 = LoopDetection
loop4.Edge(x, y) :- loop3.NextEdge(x, y).

.output loop0.BlockInLoop
.output loop0.NextEdge
.output loop0.LoopExitEdge
.output loop1.BlockInLoop
.output loop1.NextEdge
.output loop2.BlockInLoop
.output loop2.NextEdge
.output loop3.BlockInLoop
.output loop3.NextEdge
.output loop4.BlockInLoop

