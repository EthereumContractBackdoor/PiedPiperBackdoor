// Contains code (c) 2016, 2017, The University of Sydney
#include "tac_instructions.dl"

.type Statement
.type Variable
.type Opcode
.type Value
.type Block
.type Function
      
// INPUT

.decl edge(h:Statement, t:Statement)                // There is a CFG edge from h to t
.input edge
.decl def(var:Variable, stmt:Statement)             // var is defined by stmt
.input def
.decl use(var:Variable, stmt:Statement, i:number)   // var is used by stmt as argument i
.input use
.decl op(stmt:Statement, op:Opcode)                 // stmt's opcode is op
.input op
.decl value(var:Variable, val:Value)                // A variable's possible value set if known
.input value
.decl isBlock(b: Block)
.decl block(s: Statement, b: Block)
.input block

.decl Statement_Next(s: Statement, n: Statement)
.input Statement_Next

isBlock(b) :- block(_, b).

.decl in_function(b:Block, t:Function)
.input in_function

.decl StatementInPublicFunction(s: Statement, f: Function)

StatementInPublicFunction(s, f) :-
  block(s, b),
  in_function(b, f).

.decl PrecompiledCall(stmt:Statement, address:Value)

PrecompiledCall(stmt, val) :-
  CALL(stmt, _, address, _, _, _, _, _, _),
  value(address, val),
  (val = "0x1" ; val = "0x2" ; val = "0x3"; val = "0x4").

//
// *** CONTROL-FLOW ANALYSIS CONCEPTS *** 
//

.decl Entry(s:Statement)
.decl Exit(s:Statement)
.decl IsStatement(s:Statement)

IsStatement(s) :- op(s, _).

Entry(s) :- IsStatement(s), !edge(_,s).
Exit(s) :- IsStatement(s), !edge(s,_).

.decl BasicBlockBegin(s:Statement)
BasicBlockBegin(s) :- Entry(s).
BasicBlockBegin(s) :- JUMPDEST(s).
BasicBlockBegin(t) :- IsJump(s), edge(s,t).

.decl NextInSameBasicBlock(s:Statement, next:Statement)
NextInSameBasicBlock(s,next) :-
  edge(s,next), !BasicBlockBegin(next).
NextInSameBasicBlock(s,next) :-
  BasicBlockHead(s,next), edge(s,next).

.decl BasicBlockHead(s:Statement, head:Statement)
BasicBlockHead(s,s) :- BasicBlockBegin(s).
BasicBlockHead(s,h) :- BasicBlockHead(prev,h), NextInSameBasicBlock(prev,s).
 .plan 1:(2,1)

//
// *** Reachability and Dominance ***
//
       
.decl CanReach(s:Statement, t:Statement)

CanReach(s,s) :- IsStatement(s).
CanReach(s,t) :- edge(s,t).
CanReach(s,t) :- CanReach(s,v), edge(v,t).


// defined on basic blocks, identified by their first instruction
.decl SuccessorBB(next:Statement, prev:Statement)
SuccessorBB(next,prev) :-
  BasicBlockHead(exitNode, prev),
  edge(exitNode,next).

.decl PredecessorBB(prev:Statement, next:Statement)
PredecessorBB(prev,next) :-
  SuccessorBB(next,prev).

// Both arguments are basic block heads
// There is a path from the entry to s that does not go through candidate
.decl DoesNotDominate(candidate:Statement, s:Statement)
DoesNotDominate(candidate,s) :-
  Entry(s),
  BasicBlockHead(_, candidate).

DoesNotDominate(candidate,s) :-
  DoesNotDominate(candidate,other),
  SuccessorBB(s,other),
  s != candidate.

// Both arguments are basic block heads
// There is a path from s to the exit that does not go through candidate
.decl DoesNotPostDominate(candidate:Statement, s:Statement)
DoesNotPostDominate(candidate,s) :-
  Exit(exitNode),
  BasicBlockHead(exitNode,s),
  BasicBlockHead(_, candidate).

DoesNotPostDominate(candidate,s) :-
  DoesNotPostDominate(candidate,other),
  SuccessorBB(other,s),
  s != candidate.

// The Dominates/PostDominates relation is defined on basic blocks,
// represented by their first instruction (head). Defining
// a dense quadratic relation, like Dominates, on individual
// instructions would be expensive.
.decl Dominates(dominator:Statement, s:Statement)
Dominates(dominator,s) :-
  BasicBlockHead(_, dominator),
  BasicBlockHead(_, s),
  !DoesNotDominate(dominator,s).

.decl PostDominates(postdominator:Statement, s:Statement)
PostDominates(postdominator,s) :-
  BasicBlockHead(_, postdominator),
  BasicBlockHead(_, s),
  !DoesNotPostDominate(postdominator,s).

//
// *** Data flow and dependency analysis ***
//

// The value of x flows from the value of y
// I.e. y is used to calculate x, using EVM's operators
// See Also: DependsOn
.decl FlowsFrom(x:Variable, y:Variable)
FlowsFrom(x, x) :- use(x, _, _).
FlowsFrom(x, x) :- def(x, _).
FlowsFrom(x, y) :- def(x, stmt), use(y, stmt, _), op(stmt, op), FlowOp(op).
FlowsFrom(x, z) :- FlowsFrom(x, y), FlowsFrom(y, z).
        
// The value of x depends on the value of y
// I.e. y is used to calculate x, either directly as an input of the operation
// that defined x, or transitively.
.decl DependsOn(x:Variable, y:Variable)
DependsOn(x, x) :- use(x, _, _).
DependsOn(x, x) :- def(x, _).
DependsOn(x, y) :- def(x, stmt), use(y, stmt, _).
DependsOn(x, z) :- DependsOn(x, y), DependsOn(y, z).

// x controls whether y is executed.
.decl Controls(x:Statement, y:Statement)
Controls(xHead, yHead) :-
  BasicBlockHead(x, xHead),
  edge(x, w1),
  edge(x, w2),
  op(x, "JUMPI"),
  Dominates(w1, yHead),
  !Dominates(w2, yHead).

// useful ?
Controls(xHead, yHead) :-
  op(x, "THROWI"),
  BasicBlockHead(x, xHead),
  Dominates(xHead, yHead).

Controls(x, z) :- Controls(x, y), Controls(y, z). // Transitivity

// var is the guard variable of some conditional jump or throw stmt
.decl ConditionVar(var: Variable, stmt:Statement)
ConditionVar(var, stmt) :- op(stmt, "THROWI"), use(var, stmt, _).
ConditionVar(var, stmt) :- JUMPI(stmt, _, var).

// x controls whether y executes by the value in cond
.decl ControlsWith(x:Statement, y:Statement, condVar:Variable)
ControlsWith(xHead, yHead, condVar) :-
  Controls(xHead, yHead),
  BasicBlockHead(x, xHead),
  ConditionVar(condVar, x).



//// ** Recognize structured loops and related stuff **

.decl StructuredLoopBackEdge(from:Statement, to:Statement)
.decl StructuredLoopHead(s:Statement)

StructuredLoopBackEdge(from,to),
StructuredLoopHead(to) :-
  edge(from,to),
  BasicBlockHead(from,h),
  Dominates(to,h).

// Detect a loop body *without* also capturing surrounding loops (i.e., not just SCC)
.decl InStructuredLoop(s:Statement, loophead:Statement)
InStructuredLoop(backEdgeNode,loophead) :- StructuredLoopBackEdge(backEdgeNode,loophead).
InStructuredLoop(loophead,loophead) :- StructuredLoopHead(loophead).
// Can reach back edge node without going through loop head!
InStructuredLoop(s,loophead) :-
  InStructuredLoop(other,loophead),
  edge(s,other),
  other != loophead.

.output InStructuredLoop

.decl ContainsInnerStructuredLoop(loophead: Statement, innerLoopHead: Statement)
ContainsInnerStructuredLoop(loophead,innerLoopHead) :-
  StructuredLoopHead(loophead),
  StructuredLoopHead(innerLoopHead),
  InStructuredLoop(innerLoopHead,loophead),
  innerLoopHead != loophead.
  
.decl InnermostStructuredLoop(loophead:Statement)
InnermostStructuredLoop(loophead) :-
  StructuredLoopHead(loophead),
  !ContainsInnerStructuredLoop(loophead,_).

// condVar determintes whether a loop is exited
.decl LoopExitCond(condVar: Variable, x: Statement)
.output LoopExitCond
        
LoopExitCond(condVar, loop) :-
  JUMPI(jmpi, _, condVar),
  InStructuredLoop(jmpi, loop),
  edge(jmpi, out),
  !InStructuredLoop(out, loop).

.decl CanReachBlock(s:Statement, t:Statement)

CanReachBlock(x, y), CanReachBlock(y, y), CanReachBlock(x, x) :- edge(x, y).
CanReachBlock(x, z) :- CanReachBlock(x, y), edge(y, z).

.decl InSameSCC(x:Statement, y:Statement)
InSameSCC(y, y), InSameSCC(x, x) :- edge(x, y).
InSameSCC(x, y) :- CanReachBlock(x,y), CanReachBlock(y,x).

.decl InSameSCCLoop(x:Statement, y:Statement)
InSameSCCLoop(x, y) :- InSameSCC(x, y), (x != y ; edge(x, y)).

.decl BlockInSCCLoop(x:Statement, scc: number)

BlockInSCCLoop(x, scc) :-
   BasicBlockBegin(x),
   scc = min ord(y) : InSameSCCLoop(x, y).

.decl Analytics_UnstructuredLoop(n: number)
.output Analytics_UnstructuredLoop

Analytics_UnstructuredLoop(scc) :-
   BlockInSCCLoop(b, scc),
   !InStructuredLoop(b, _).

.decl Analytics_StructuredLoop(b: Statement)
.output Analytics_StructuredLoop

Analytics_StructuredLoop(b) :-
   InStructuredLoop(_, b).

.decl Analytics_LoopHasExitCond(b: Statement)
.output Analytics_LoopHasExitCond

Analytics_LoopHasExitCond(b) :-
  LoopExitCond(_, b).

// Reachable jump statements
.decl Analytics_Jumps(jmp:Statement)
.output Analytics_Jumps

Analytics_Jumps(jmp) :- IsJump(jmp), (edge(jmp, _) ; edge(_, jmp)).

.decl Analytics_Blocks(b:Block)
.output Analytics_Blocks

Analytics_Blocks(b) :- isBlock(b).

.decl Analytics_Functions(fn:Function)
.output Analytics_Functions
Analytics_Functions(fn) :- in_function(_, fn).

// This is the selector function (same as in gigahorse)
Analytics_Functions("0x0").

.decl Analytics_BlockInMultipleFunctions(fn:Function)
.output Analytics_BlockInMultipleFunctions
Analytics_BlockInMultipleFunctions(fn) :-
   in_function(b, fn),
   in_function(b, fn2),
   fn != fn2.


.decl Analytics_BlockInNoFunctions(b: Block)
.output Analytics_BlockInNoFunctions
Analytics_BlockInNoFunctions(b) :-
   isBlock(b),
   !in_function(b, _),
   b != "0x0".

.decl Analytics_UnreachableBlock(b: Block)
.output Analytics_UnreachableBlock

.decl ReachableBlock(x: Statement)
ReachableBlock("0x0").
ReachableBlock(b) :- ReachableBlock(p), SuccessorBB(b,p).

Analytics_UnreachableBlock(b) :-
   isBlock(b),
   !ReachableBlock(b).


.decl JumpTarget(b: Statement, t: Statement)

JumpTarget(b, t) :-
   JUMP(jmpStmt, _),
   edge(jmpStmt, t),
   JUMPDEST(t),
   BasicBlockHead(jmpStmt, b).

.decl JumpITarget(b: Statement, t: Statement)

JumpITarget(b, t) :-
   JUMPI(jmpStmt, _, _),
   edge(jmpStmt, t),
   JUMPDEST(t),
   !Statement_Next(jmpStmt, t),
   BasicBlockHead(jmpStmt, b).

.decl Analytics_MissingJumpTarget(b: Statement)
.output Analytics_MissingJumpTarget

Analytics_MissingJumpTarget(b) :-
   IsJump(stmt),
   BasicBlockHead(stmt, b),
   !JumpTarget(b, _),
   !JumpITarget(b, _),
   JUMPDEST(_).

.decl Analytics_PolymorphicTarget(b: Statement)
.output Analytics_PolymorphicTarget

Analytics_PolymorphicTarget(b) :-
   (JumpTarget(b, t1) ; JumpITarget(b, t1)),
   (JumpTarget(b, t2) ; JumpITarget(b, t2)),
   t1 != t2.

.decl Analytics_DataFlows(x: Variable, y: Variable)
.output Analytics_DataFlows

Analytics_DataFlows(x, y) :-
   FlowsFrom(y, x).

.decl Analytics_Variables(x: Variable)
.output Analytics_Variables

Analytics_Variables(x) :- use(x, _, _) ; def(x, _).