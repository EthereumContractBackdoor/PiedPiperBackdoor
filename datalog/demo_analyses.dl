// BSD 3-Clause License
//
// Copyright (c) 2016, 2017, The University of Sydney. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "lib/vandal.dl"

.decl reentrantCall(stmt: Statement)
.decl originUsed(stmt:Statement)
.decl checkedCallStateUpdate(callStmt:Statement)
.decl uncheckedCall(u:Statement)
.decl unsecuredValueSend(stmt:Statement)
.decl destroyable(stmt:Statement)

.output reentrantCall
.output originUsed
.output checkedCallStateUpdate
.output uncheckedCall
.output unsecuredValueSend
.output destroyable

// OUTPUT

// REENTRANCY

// Holds if the statement is protected by a mutex.
// Note: the domination line might be too strong. A protected statement must
//       have mutex checks at all incoming paths, of which there may be multiple.
// Possible improvements:
//   Check if the values being written are the right ones:
//     writing true to set the mutex, then read true leads to throw to check it.
//   Multiple mutexes across different paths (c.f. solarstorm),
//   A mutex only needs to be checked and not set if state is just being written to,
//     if there are no possible reentrant calls on a given path.
//   Specify that the mutex location values MUST match (i.e. only one possible value)

// Could also check whether the gas is higher than some manually-set gas threshold.

reentrantCall(stmt) :-
  op(stmt, "CALL"),
  !protectedByLoc(stmt, _),
  gassy(stmt, gasVar),
  op_CALL(stmt, gasVar, _, _, _, _, _, _).

// ORIGIN

// Dependency from the origin opcode to an actual use of it.
// stmt is the statement where the origin value is used.
originUsed(useStmt) :-
  op(originStmt, "ORIGIN"),
  def(originVar, originStmt),
  depends(useVar, originVar),
  usedInStateOrCond(useVar, useStmt).

// UNCHECKED SEND

checkedCallStateUpdate(callStmt) :-
  callResult(resVar, callStmt),
  depends(cond, resVar),
  controlsWith(_, storeStmt, cond),
  op(storeStmt, "SSTORE").

checkedCallStateUpdate(callStmt) :-
  callResult(resVar, callStmt),
  depends(stateVar, resVar),
  use(stateVar, storeStmt, _),
  op(storeStmt, "SSTORE").

uncheckedCall(u) :-
  callResult(_, u),
  !checkedCallThrows(u),
  !checkedCallStateUpdate(u).

// UNSECURED BALANCE

// A call statement satisfies this relation if its target can be manipulated
// (and is not constant), it actually sends some value, and it's actually
// callable.

unsecuredValueSend(stmt) :-
  op_CALL(stmt, _, target, val, _, _, _, _),
  nonConstManipulable(target),
  usefulValue(val),
  !inaccessible(stmt).

// SUICIDE

destroyable(stmt) :-
  !inaccessible(stmt),
  op(stmt, "SELFDESTRUCT").
